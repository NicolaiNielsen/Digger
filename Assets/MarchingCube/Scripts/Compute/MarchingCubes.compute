#pragma kernel ProcessCube
#include "Includes/MarchTables.compute"
#include "Includes/Noise.compute"

struct Vertex {
    float3 position;
    float3 normal;
    int2 id;
};

struct Triangle {
    Vertex vertexC;
    Vertex vertexB;
    Vertex vertexA;
};

AppendStructuredBuffer<Triangle> triangles;
RWTexture3D<float> DensityTexture;
int3 textureSize; 
int numPointsPerAxis;
float chunkSize;
float isoLevel;
float3 chunkCoord;
//chunk coord is 0,0,0 

// chunk coord er beregnet
float3 coordToWorld(int3 coord)
{   
    float voxelSize = chunkSize / (numPointsPerAxis - 1);
    //return ((coord / (float3)(textureSize - 1)) - 0.5f) * chunkSize;
    // Antag chunkCoord = (chunkIndexX, chunkIndexY, chunkIndexZ)
    //0,0,0 * 8 *
    float3 chunkOrigin = ((chunkCoord * (numPointsPerAxis - 1)) * voxelSize);

    int3 localCoord = (coord - int3(chunkCoord * (numPointsPerAxis - 1)));
    return chunkOrigin + (localCoord) * voxelSize;
}

int indexFromCoord(int3 coord) {
    coord = coord - int3(chunkCoord);
    return coord.z * numPointsPerAxis * numPointsPerAxis + coord.y * numPointsPerAxis + coord.x;
}

float sampleDensity(int3 coord) {
    // Clamp coordinates to valid texture bounds
    coord = max(int3(0,0,0), min(coord, textureSize - 1));
    return DensityTexture[coord];
}

float3 calculateNormal(int3 coord) {
    int3 offsetX = int3(1, 0, 0);
    int3 offsetY = int3(0, 1, 0);
    int3 offsetZ = int3(0, 0, 1);

    float dx = sampleDensity(coord + offsetX) - sampleDensity(coord - offsetX);
    float dy = sampleDensity(coord + offsetY) - sampleDensity(coord - offsetY);
    float dz = sampleDensity(coord + offsetZ) - sampleDensity(coord - offsetZ);

    return normalize(float3(dx, dy, dz));
}

Vertex createVertex(int3 coordA, int3 coordB) {
    float3 posA = coordToWorld(coordA);
    float3 posB = coordToWorld(coordB);
    float densityA = sampleDensity(coordA);
    float densityB = sampleDensity(coordB);

    // Interpolate between the two corner points based on the density
    float t = (isoLevel - densityA) / (densityB - densityA);
    float3 position = posA + t * (posB - posA);

    // Normal:
    float3 normalA = calculateNormal(coordA);
    float3 normalB = calculateNormal(coordB);
    float3 normal = normalize(normalA + t * (normalB - normalA));

    // ID
    int indexA = indexFromCoord(coordA);
    int indexB = indexFromCoord(coordB);

    // Create vertex
    Vertex vertex;
    vertex.position = position;
    vertex.normal = normal;
    vertex.id = int2(min(indexA, indexB), max(indexA, indexB));

    return vertex;
}
//What are we dispatching?

[numthreads(8,8,8)]
void ProcessCube (int3 id : SV_DispatchThreadID)
{      
    //So inside processCube we give it id.x, id.y, id,z
    //which begins from 0,0,0 --> 35,35,35 (numVoxelsPerAxis (numPointsPerAxis - 1))

    //35 = 36 - 1
    int numCubesPerAxis = numPointsPerAxis - 1;
    
    //Bounds check
    //if the id.x is greater than the number of points per axis, we just return
    if (id.x >= numCubesPerAxis || id.y >= numCubesPerAxis || id.z >= numCubesPerAxis) {
        return;
    }


    //We then calculate the coord 
    //id which is the chunk index
    
    //In a 2x2x2 we run throug 0,0,0 --> 1,1,1 which is 8 cubes 
    //then we calculate the coord 0,0,0 + 

    //Chunkcoord is calculated as follows:
    // chunk.id * numPointsPerAxis - 1
    // we wanna take the current coordinate and shift it relative to the chunk

    //So we end up with the following:
    int3 coord = id + int3(chunkCoord);
    
    //if we work with 0,0,0 chunkCoord + 0,0,1 --> 36,36,36
    //if we work with 0,0,1 then chunk coord becomes 0,0,35 --> 35,35,70?
    //
    // Calculate coordinates of each corner of the current cube
    int3 cornerCoords[8];
    cornerCoords[0] = coord + int3(0, 0, 0);
    cornerCoords[1] = coord + int3(1, 0, 0);
    cornerCoords[2] = coord + int3(1, 0, 1);
    cornerCoords[3] = coord + int3(0, 0, 1);
    cornerCoords[4] = coord + int3(0, 1, 0);
    cornerCoords[5] = coord + int3(1, 1, 0);
    cornerCoords[6] = coord + int3(1, 1, 1);
    cornerCoords[7] = coord + int3(0, 1, 1);

    // Calculate unique index for each cube configuration.
    int cubeConfiguration = 0;
    for (int i = 0; i < 8; i ++) {
        if (sampleDensity(cornerCoords[i]) < isoLevel) {
            cubeConfiguration |= (1 << i);
        }
    }

    // Get array of the edges of the cube that the surface passes through.
    int edgeIndices[] = triangulation[cubeConfiguration];

    // Create triangles for the current cube configuration
    for (int i = 0; i < 16; i += 3) {
        // If edge index is -1, then no further vertices exist in this configuration
        if (edgeIndices[i] == -1) { break; }

        int edgeIndexA = edgeIndices[i];
        int a0 = cornerIndexAFromEdge[edgeIndexA];
        int a1 = cornerIndexBFromEdge[edgeIndexA];

        int edgeIndexB = edgeIndices[i+1];
        int b0 = cornerIndexAFromEdge[edgeIndexB];
        int b1 = cornerIndexBFromEdge[edgeIndexB];

        int edgeIndexC = edgeIndices[i+2];
        int c0 = cornerIndexAFromEdge[edgeIndexC];
        int c1 = cornerIndexBFromEdge[edgeIndexC];

        // Calculate positions of each vertex.
        Vertex vertexA = createVertex(cornerCoords[a0], cornerCoords[a1]);
        Vertex vertexB = createVertex(cornerCoords[b0], cornerCoords[b1]);
        Vertex vertexC = createVertex(cornerCoords[c0], cornerCoords[c1]);

        // Create triangle
        Triangle tri;
        tri.vertexA = vertexC;
        tri.vertexB = vertexB;
        tri.vertexC = vertexA;
        triangles.Append(tri);
    }
}
